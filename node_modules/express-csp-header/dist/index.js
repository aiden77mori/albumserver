"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.expressCspHeader = void 0;
const crypto_1 = __importDefault(require("crypto"));
const csp_header_1 = require("csp-header");
const psl = __importStar(require("psl"));
const constants_1 = require("./constants");
__exportStar(require("./constants"), exports);
function expressCspHeader(params) {
    return function (req, res, next) {
        if (!params) {
            next();
            return;
        }
        const { domainOptions } = params;
        let cspString = getCspString(req, res, params);
        cspString = applyNonce(req, cspString);
        cspString = applyAutoTld(req, cspString, domainOptions);
        res.set(params.reportOnly ? CSP_REPORT_ONLY_HEADER : CSP_HEADER, cspString);
        const reportTo = typeof params.reportTo === 'function' ?
            params.reportTo(req, res) :
            params.reportTo;
        if (reportTo) {
            res.set(REPORT_TO_HEADER, reportTo.map(group => JSON.stringify(group)).join(','));
        }
        next();
    };
}
exports.expressCspHeader = expressCspHeader;
function getCspString(req, res, params) {
    const { directives, presets, reportUri } = params;
    const cspHeaderParams = {
        directives,
        presets,
        reportUri: typeof reportUri === 'function' ? reportUri(req, res) : reportUri
    };
    return csp_header_1.getCSP(cspHeaderParams);
}
function applyNonce(req, cspString) {
    if (cspString.includes(constants_1.NONCE)) {
        req.nonce = crypto_1.default.randomBytes(16).toString('base64');
        return cspString.replace(new RegExp(constants_1.NONCE, 'g'), csp_header_1.nonce(req.nonce));
    }
    return cspString;
}
function applyAutoTld(req, cspString, domainOptions) {
    if (cspString.includes(constants_1.TLD)) {
        const tld = parseDomain(req.hostname, domainOptions);
        if (!tld) {
            return cspString;
        }
        return cspString.replace(new RegExp(constants_1.TLD, 'g'), tld);
    }
    return cspString;
}
function parseDomain(hostname, domainOptions) {
    const customTlds = domainOptions === null || domainOptions === void 0 ? void 0 : domainOptions.customTlds;
    if (customTlds instanceof RegExp) {
        const tld = hostname.match(customTlds);
        if (tld !== null) {
            return tld[0].replace(/^\.+/, '');
        }
    }
    if (Array.isArray(customTlds)) {
        for (const tld of customTlds) {
            if (hostname.endsWith(`.${tld}`)) {
                return tld;
            }
        }
    }
    const domain = psl.parse(hostname);
    if (domain.error) {
        return null;
    }
    return domain.tld;
}
const CSP_HEADER = 'Content-Security-Policy';
const CSP_REPORT_ONLY_HEADER = 'Content-Security-Policy-Report-Only';
const REPORT_TO_HEADER = 'Report-To';
//# sourceMappingURL=index.js.map